# 全局配置:
server:
  port: 8082
spring:
  profiles:
    active: @project.env@
  application:
        name: customer

---
# 开发环境配置 dev

console-available: true
spring:
  profiles: dev
  output:
     ansi:
       enabled: ALWAYS
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: @db.url@
    username: @db.username@
    password: @db.password@
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: @db.initialSize@ # 初始化大小
    minIdle: @db.minIdle@
    maxActive: @db.maxActive@
    maxWait: @db.maxWait@ # 配置获取连接等待超时的时间
    timeBetweenEvictionRunsMillis: @db.timeBetweenEvictionRunsMillis@ # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    minEvictableIdleTimeMillis: @db.minEvictableIdleTimeMillis@   # 配置一个连接在池中最小生存的时间，单位是毫秒
    validationQuery: @db.validationQuery@
    testWhileIdle: @db.testWhileIdle@
    testOnBorrow: @db.testOnBorrow@
    testOnReturn: @db.testOnReturn@
    poolPreparedStatements: @db.poolPreparedStatements@ # 打开PSCache，并且指定每个连接上PSCache的大小
    maxPoolPreparedStatementPerConnectionSize: @db.maxPoolPreparedStatementPerConnectionSize@
    filters: @db.filters@
    connectionProperties: @db.connectionProperties@
server:
  context-path: /api
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
#断路由
feign:
  hystrix:
    enabled: true
##timeout config,Hystrix默认的超时时间是1秒，如果超过这个时间尚未响应，
#将会进入fallback代码。而首次请求往往会比较慢（因为Spring的懒加载机制，要实例化一些类），
#这个响应时间可能就大于1秒了
#该配置是让Hystrix的超时时间改为10秒
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 10000
logging:
  level:
    com.qws.producer.feign.ProducerFeign: debug
---
# 生产环境配置 pro
spring:
  profiles: pro
  output:
     ansi:
       enabled: ALWAYS
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: @db.url@
    username: @db.username@
    password: @db.password@
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: @db.initialSize@ # 初始化大小
    minIdle: @db.minIdle@
    maxActive: @db.maxActive@
    maxWait: @db.maxWait@ # 配置获取连接等待超时的时间
    timeBetweenEvictionRunsMillis: @db.timeBetweenEvictionRunsMillis@ # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    minEvictableIdleTimeMillis: @db.minEvictableIdleTimeMillis@   # 配置一个连接在池中最小生存的时间，单位是毫秒
    validationQuery: @db.validationQuery@
    testWhileIdle: @db.testWhileIdle@
    testOnBorrow: @db.testOnBorrow@
    testOnReturn: @db.testOnReturn@
    poolPreparedStatements: @db.poolPreparedStatements@ # 打开PSCache，并且指定每个连接上PSCache的大小
    maxPoolPreparedStatementPerConnectionSize: @db.maxPoolPreparedStatementPerConnectionSize@
    filters: @db.filters@
    connectionProperties: @db.connectionProperties@
server:
  context-path: /api
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
#断路由
feign:
  hystrix:
    enabled: true
##timeout config,Hystrix默认的超时时间是1秒，如果超过这个时间尚未响应，
#将会进入fallback代码。而首次请求往往会比较慢（因为Spring的懒加载机制，要实例化一些类），
#这个响应时间可能就大于1秒了
#该配置是让Hystrix的超时时间改为10秒
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 10000

